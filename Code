//USER WATCHING PROFILE
// socketService.emit(SOCKET_EMIT_USER_WATCHING_GIG, this.gig.owner)
// socket.on('gig-watching', async (user) => {
//   const toSocket = await _getUserSocket(user._id)
//   if (toSocket)
//     toSocket.emit(
//       'gig-watching',
//       `${user.username}! A user is watching your gig right now.`
//     )
//   return
// })

//FRONTEND-GIG PURCHASE//
async function handlePurchase() {
  this.$store.dispatch({ type: 'saveOrder', order: { ...order } })
  socketService.emit('gig-ordered-seller', this.gig)
  eventBusService.emit('show-msg', {
    txt: 'Your Order Is Being Processed',
    type: 'success',
  })
}

//BACKEND - SAVE GIG IN DATABASE//

async function add(order) {
  try {
    let collection = await dbService.getCollection('order')
    let addedOrder = await collection.insertOne(order)
    addedOrder = addedOrder.ops[0]
    addedOrder.createdAt = ObjectId(addedOrder._id).getTimestamp()
    return addedOrder
  } catch (err) {
    logger.error('cannot insert order', err)
    throw err
  }
}

//EMIT SOCKET//
socket.on('gig-ordered', async (gig) => {
  const toSocket = await _getUserSocket(gig.owner._id)
  if (toSocket)
    toSocket.emit(
      'user-ordered-gig',
      `Hey ${gig.owner.username}! \nA user has just ordered one of your gigs right now.`
    )
  return
})
